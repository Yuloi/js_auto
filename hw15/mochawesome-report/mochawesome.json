{
  "stats": {
    "suites": 15,
    "tests": 84,
    "passes": 65,
    "pending": 0,
    "failures": 19,
    "start": "2022-11-13T19:56:34.076Z",
    "end": "2022-11-13T19:56:34.131Z",
    "duration": 55,
    "testsRegistered": 84,
    "passPercent": 77.38095238095238,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "549b49a1-b410-4408-8ac6-08899a56bb66",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "96e17817-a76e-41de-a065-7c54309564b3",
          "title": "Testing Add method from calculator class",
          "fullFile": "/Users/yuliyakazakevich/Documents/GitHub/js_auto/hw15/test/add.test.js",
          "file": "/test/add.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8b7c88f5-a847-4cd0-93b5-dedff83d8227",
              "title": "Positive cases for Add method",
              "fullFile": "/Users/yuliyakazakevich/Documents/GitHub/js_auto/hw15/test/add.test.js",
              "file": "/test/add.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Function is able to sum two possitive integers",
                  "fullTitle": "Testing Add method from calculator class Positive cases for Add method Function is able to sum two possitive integers",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.add(1,2);\nexpect(result).to.be.equal(3);",
                  "err": {},
                  "uuid": "23dd69b1-791c-4354-8cca-b58663f3cb77",
                  "parentUUID": "8b7c88f5-a847-4cd0-93b5-dedff83d8227",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to sum two negative integers",
                  "fullTitle": "Testing Add method from calculator class Positive cases for Add method Function is able to sum two negative integers",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.add(-10, -4);\nexpect(result).to.equal(-14);",
                  "err": {},
                  "uuid": "e5df8994-454a-4616-9597-3d918c8de050",
                  "parentUUID": "8b7c88f5-a847-4cd0-93b5-dedff83d8227",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to sum positive int and negative int",
                  "fullTitle": "Testing Add method from calculator class Positive cases for Add method Function is able to sum positive int and negative int",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.add(4,-1);\nexpect(result).to.be.equal(3);",
                  "err": {},
                  "uuid": "0c8138ef-4948-4a84-8fb1-af8848eb03ca",
                  "parentUUID": "8b7c88f5-a847-4cd0-93b5-dedff83d8227",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to sum two positive float with the same amount of numbers after dot",
                  "fullTitle": "Testing Add method from calculator class Positive cases for Add method Function is able to sum two positive float with the same amount of numbers after dot",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.add(4.28, 0.14);\nexpect(result).to.be.equal(4.42);",
                  "err": {},
                  "uuid": "f63fad9a-dddd-4f38-b7b6-3079ca83f92d",
                  "parentUUID": "8b7c88f5-a847-4cd0-93b5-dedff83d8227",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to sum two negative float with different amount of numbers after dot",
                  "fullTitle": "Testing Add method from calculator class Positive cases for Add method Function is able to sum two negative float with different amount of numbers after dot",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.add(-10.1, -2.245);\nexpect(result).to.be.equal(-12.345);",
                  "err": {
                    "message": "AssertionError: expected -12.344999999999999 to equal -12.345",
                    "estack": "AssertionError: expected -12.344999999999999 to equal -12.345\n    at Context.<anonymous> (test/add.test.js:26:25)\n    at process.processImmediate (node:internal/timers:471:21)",
                    "diff": "- -12.344999999999999\n+ -12.345\n"
                  },
                  "uuid": "84f4e312-3ff8-4b8f-b84e-df0cf4f00fb8",
                  "parentUUID": "8b7c88f5-a847-4cd0-93b5-dedff83d8227",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to sum negative float and positive int",
                  "fullTitle": "Testing Add method from calculator class Positive cases for Add method Function is able to sum negative float and positive int",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.add(-2.245, 1);\nexpect(result).to.be.equal(-1.245);",
                  "err": {},
                  "uuid": "8e5886df-d336-46ed-be80-3cda0f35a979",
                  "parentUUID": "8b7c88f5-a847-4cd0-93b5-dedff83d8227",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to sum zero",
                  "fullTitle": "Testing Add method from calculator class Positive cases for Add method Function is able to sum zero",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.add(0);\nexpect(result).to.be.equal(0);",
                  "err": {},
                  "uuid": "f13bf4e1-e394-46d5-9066-879b9b1e6915",
                  "parentUUID": "8b7c88f5-a847-4cd0-93b5-dedff83d8227",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to sum zero and positive float",
                  "fullTitle": "Testing Add method from calculator class Positive cases for Add method Function is able to sum zero and positive float",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.add(0,0.34);\nexpect(result).to.be.equal(0.34);",
                  "err": {},
                  "uuid": "03411ba6-89b8-4c8b-9ac2-0013d05879b2",
                  "parentUUID": "8b7c88f5-a847-4cd0-93b5-dedff83d8227",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to sum zero and negative float",
                  "fullTitle": "Testing Add method from calculator class Positive cases for Add method Function is able to sum zero and negative float",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.add(-14.980, 0);\nexpect(result).to.be.equal(-14.980);",
                  "err": {},
                  "uuid": "c0959f9d-33ad-4825-823d-b4f9104ce9f0",
                  "parentUUID": "8b7c88f5-a847-4cd0-93b5-dedff83d8227",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to sum zero and positive int",
                  "fullTitle": "Testing Add method from calculator class Positive cases for Add method Function is able to sum zero and positive int",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.add(0,10);\nexpect(result).to.be.equal(10);",
                  "err": {},
                  "uuid": "e70a8b80-107b-4bcd-a6b3-d1803dfb825e",
                  "parentUUID": "8b7c88f5-a847-4cd0-93b5-dedff83d8227",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to sum zero and negative int",
                  "fullTitle": "Testing Add method from calculator class Positive cases for Add method Function is able to sum zero and negative int",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.add(0,-1);\nexpect(result).to.be.equal(-1);",
                  "err": {},
                  "uuid": "e1cb2126-e0cc-441a-8950-eaa9035a3bb2",
                  "parentUUID": "8b7c88f5-a847-4cd0-93b5-dedff83d8227",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to sum big numbers",
                  "fullTitle": "Testing Add method from calculator class Positive cases for Add method Function is able to sum big numbers",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.add(10e5,50e2,32e2);\nexpect(result).to.be.equal(1008200);",
                  "err": {},
                  "uuid": "6fa33655-0652-4bac-9fd4-9be3baff4af2",
                  "parentUUID": "8b7c88f5-a847-4cd0-93b5-dedff83d8227",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to sum floats with big amount of numbers after dot",
                  "fullTitle": "Testing Add method from calculator class Positive cases for Add method Function is able to sum floats with big amount of numbers after dot",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.add(0.10, -0.1345, 34.12);\nexpect(result).to.be.equal(34.0855);",
                  "err": {
                    "message": "AssertionError: expected 34.085499999999996 to equal 34.0855",
                    "estack": "AssertionError: expected 34.085499999999996 to equal 34.0855\n    at Context.<anonymous> (test/add.test.js:58:25)\n    at process.processImmediate (node:internal/timers:471:21)",
                    "diff": "- 34.085499999999996\n+ 34.0855\n"
                  },
                  "uuid": "cd78b18a-19a4-4057-9224-3ab8e19b3481",
                  "parentUUID": "8b7c88f5-a847-4cd0-93b5-dedff83d8227",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is returning number as type number",
                  "fullTitle": "Testing Add method from calculator class Positive cases for Add method Function is returning number as type number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.add(1,2);\nexpect(result).to.be.a('number');",
                  "err": {},
                  "uuid": "8d5ada5b-632c-4c95-8384-7c71de78fbc1",
                  "parentUUID": "8b7c88f5-a847-4cd0-93b5-dedff83d8227",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is returning result for int as type number",
                  "fullTitle": "Testing Add method from calculator class Positive cases for Add method Function is returning result for int as type number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.add(1.12,2.345);\nexpect(result).to.be.a('number');",
                  "err": {},
                  "uuid": "bf354602-638f-41fe-8744-0147965d62bb",
                  "parentUUID": "8b7c88f5-a847-4cd0-93b5-dedff83d8227",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "23dd69b1-791c-4354-8cca-b58663f3cb77",
                "e5df8994-454a-4616-9597-3d918c8de050",
                "0c8138ef-4948-4a84-8fb1-af8848eb03ca",
                "f63fad9a-dddd-4f38-b7b6-3079ca83f92d",
                "8e5886df-d336-46ed-be80-3cda0f35a979",
                "f13bf4e1-e394-46d5-9066-879b9b1e6915",
                "03411ba6-89b8-4c8b-9ac2-0013d05879b2",
                "c0959f9d-33ad-4825-823d-b4f9104ce9f0",
                "e70a8b80-107b-4bcd-a6b3-d1803dfb825e",
                "e1cb2126-e0cc-441a-8950-eaa9035a3bb2",
                "6fa33655-0652-4bac-9fd4-9be3baff4af2",
                "8d5ada5b-632c-4c95-8384-7c71de78fbc1",
                "bf354602-638f-41fe-8744-0147965d62bb"
              ],
              "failures": [
                "84f4e312-3ff8-4b8f-b84e-df0cf4f00fb8",
                "cd78b18a-19a4-4057-9224-3ab8e19b3481"
              ],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1500
            },
            {
              "uuid": "849bb036-2df4-4b8d-984c-a33a23c51e9e",
              "title": "Negative cases for Add method",
              "fullFile": "/Users/yuliyakazakevich/Documents/GitHub/js_auto/hw15/test/add.test.js",
              "file": "/test/add.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Function is able to return correct result when params passed as array",
                  "fullTitle": "Testing Add method from calculator class Negative cases for Add method Function is able to return correct result when params passed as array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.add([1,2]);\nexpect(result).to.be.equal(3);",
                  "err": {
                    "message": "AssertionError: expected '01,2' to equal 3",
                    "estack": "AssertionError: expected '01,2' to equal 3\n    at Context.<anonymous> (test/add.test.js:72:25)\n    at process.processImmediate (node:internal/timers:471:21)",
                    "diff": null
                  },
                  "uuid": "3706d211-6957-4a0e-8b71-c307764bf507",
                  "parentUUID": "849bb036-2df4-4b8d-984c-a33a23c51e9e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to return correct result with actions inside brackets",
                  "fullTitle": "Testing Add method from calculator class Negative cases for Add method Function is able to return correct result with actions inside brackets",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.add((1+2),3);\nexpect(result).to.be.equal(6);",
                  "err": {},
                  "uuid": "704beb5f-cbf9-4a7e-8ed3-4e8354af4786",
                  "parentUUID": "849bb036-2df4-4b8d-984c-a33a23c51e9e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to return correct result when passed only 1 param",
                  "fullTitle": "Testing Add method from calculator class Negative cases for Add method Function is able to return correct result when passed only 1 param",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.add(10);\nexpect(result).to.be.equal(10);",
                  "err": {},
                  "uuid": "abbaa074-e471-4b91-b535-f07b9a30de92",
                  "parentUUID": "849bb036-2df4-4b8d-984c-a33a23c51e9e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to sum float without 0 in the beginning .01 type",
                  "fullTitle": "Testing Add method from calculator class Negative cases for Add method Function is able to sum float without 0 in the beginning .01 type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.add(.10, .10);\nexpect(result).to.be.equal(0.20);",
                  "err": {},
                  "uuid": "4d1539d1-912d-4f95-9fbb-c68b40b8c0d9",
                  "parentUUID": "849bb036-2df4-4b8d-984c-a33a23c51e9e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is returning 0 when no params passed",
                  "fullTitle": "Testing Add method from calculator class Negative cases for Add method Function is returning 0 when no params passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.add();\nexpect(result).to.be.equal(0);",
                  "err": {},
                  "uuid": "7e15974d-484c-460d-bdea-dd1afd4ed70d",
                  "parentUUID": "849bb036-2df4-4b8d-984c-a33a23c51e9e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "704beb5f-cbf9-4a7e-8ed3-4e8354af4786",
                "abbaa074-e471-4b91-b535-f07b9a30de92",
                "4d1539d1-912d-4f95-9fbb-c68b40b8c0d9",
                "7e15974d-484c-460d-bdea-dd1afd4ed70d"
              ],
              "failures": [
                "3706d211-6957-4a0e-8b71-c307764bf507"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1500
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1500
        },
        {
          "uuid": "8dff42f3-74d4-4d5b-86ce-86af89c1a9bc",
          "title": "Testing Divide method from calculator class",
          "fullFile": "/Users/yuliyakazakevich/Documents/GitHub/js_auto/hw15/test/divide.test.js",
          "file": "/test/divide.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c8383663-d69e-469e-9e96-f0c197a7d8b5",
              "title": "Positive cases for Divide method",
              "fullFile": "/Users/yuliyakazakevich/Documents/GitHub/js_auto/hw15/test/divide.test.js",
              "file": "/test/divide.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Function is able to divide two possitive integers without remainder",
                  "fullTitle": "Testing Divide method from calculator class Positive cases for Divide method Function is able to divide two possitive integers without remainder",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.divide(12,4);\nexpect(result).to.be.equal(3);",
                  "err": {},
                  "uuid": "7a04cf7b-507a-413e-a91c-1dd4f97572e7",
                  "parentUUID": "c8383663-d69e-469e-9e96-f0c197a7d8b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to divide two possitive integers with remainder",
                  "fullTitle": "Testing Divide method from calculator class Positive cases for Divide method Function is able to divide two possitive integers with remainder",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.divide(12,5);\nexpect(result).to.be.equal(2.4);",
                  "err": {},
                  "uuid": "2f1fc810-0d7f-4e31-a9cf-e0874453848a",
                  "parentUUID": "c8383663-d69e-469e-9e96-f0c197a7d8b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to divide two negative integers without remainder",
                  "fullTitle": "Testing Divide method from calculator class Positive cases for Divide method Function is able to divide two negative integers without remainder",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.divide(-20,-2);\nexpect(result).to.equal(10);",
                  "err": {},
                  "uuid": "a78955f5-4db9-46cc-bcb9-69825f1621be",
                  "parentUUID": "c8383663-d69e-469e-9e96-f0c197a7d8b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to divide two negative integers with remainder",
                  "fullTitle": "Testing Divide method from calculator class Positive cases for Divide method Function is able to divide two negative integers with remainder",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.divide(-4,-5);\nexpect(result).to.be.equal(0.8);",
                  "err": {},
                  "uuid": "5538bd17-a46b-47cb-8b3d-c11ad341f632",
                  "parentUUID": "c8383663-d69e-469e-9e96-f0c197a7d8b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to divide positive int and negative int",
                  "fullTitle": "Testing Divide method from calculator class Positive cases for Divide method Function is able to divide positive int and negative int",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.divide(6,-2);\nexpect(result).to.be.equal(-13);",
                  "err": {
                    "message": "AssertionError: expected -3 to equal -13",
                    "estack": "AssertionError: expected -3 to equal -13\n    at Context.<anonymous> (test/divide.test.js:26:25)\n    at process.processImmediate (node:internal/timers:471:21)",
                    "diff": "- -3\n+ -13\n"
                  },
                  "uuid": "4190bcbc-c441-452d-a738-146b73a810bc",
                  "parentUUID": "c8383663-d69e-469e-9e96-f0c197a7d8b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to divide two positive float with the same amount of numbers after dot",
                  "fullTitle": "Testing Divide method from calculator class Positive cases for Divide method Function is able to divide two positive float with the same amount of numbers after dot",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.divide(4.28, 0.20);\nexpect(result).to.be.equal(21.4);",
                  "err": {},
                  "uuid": "a8ebc239-dfa4-4d2a-b022-abf6fb5f53c2",
                  "parentUUID": "c8383663-d69e-469e-9e96-f0c197a7d8b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to divide two negative float with different amount of numbers after dot",
                  "fullTitle": "Testing Divide method from calculator class Positive cases for Divide method Function is able to divide two negative float with different amount of numbers after dot",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.divide(-10.2,-2.0);\nexpect(result).to.be.equal(5.1);",
                  "err": {},
                  "uuid": "dd222ee0-b600-45fc-a7dd-da197a946d69",
                  "parentUUID": "c8383663-d69e-469e-9e96-f0c197a7d8b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to divide zero and positive float",
                  "fullTitle": "Testing Divide method from calculator class Positive cases for Divide method Function is able to divide zero and positive float",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.divide(0,0.3434);\nexpect(result).to.be.equal(0);",
                  "err": {},
                  "uuid": "25d7eda9-d02e-47c2-9e35-006410e21c5c",
                  "parentUUID": "c8383663-d69e-469e-9e96-f0c197a7d8b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to divide zero and negative float",
                  "fullTitle": "Testing Divide method from calculator class Positive cases for Divide method Function is able to divide zero and negative float",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.divide(0,-12.23);\nexpect(result).to.be.equal(0);",
                  "err": {},
                  "uuid": "43ef8911-fb29-4234-b373-e4636ec05c7c",
                  "parentUUID": "c8383663-d69e-469e-9e96-f0c197a7d8b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to divide zero and positive int",
                  "fullTitle": "Testing Divide method from calculator class Positive cases for Divide method Function is able to divide zero and positive int",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.divide(0,10);\nexpect(result).to.be.equal(0);",
                  "err": {},
                  "uuid": "a7feb910-3ada-401b-a3a1-aa5be3b64f2a",
                  "parentUUID": "c8383663-d69e-469e-9e96-f0c197a7d8b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to divide zero and negative int",
                  "fullTitle": "Testing Divide method from calculator class Positive cases for Divide method Function is able to divide zero and negative int",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.divide(0,-1);\nexpect(result).to.be.equal(0);",
                  "err": {},
                  "uuid": "6fa42c9a-025c-4450-986e-0201462a194c",
                  "parentUUID": "c8383663-d69e-469e-9e96-f0c197a7d8b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is returning result for int as type number",
                  "fullTitle": "Testing Divide method from calculator class Positive cases for Divide method Function is returning result for int as type number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.divide(1,2);\nexpect(result).to.be.a('number');",
                  "err": {},
                  "uuid": "01f770bd-4c2d-4fd0-812d-844f09a5b784",
                  "parentUUID": "c8383663-d69e-469e-9e96-f0c197a7d8b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is returning result for float as type number",
                  "fullTitle": "Testing Divide method from calculator class Positive cases for Divide method Function is returning result for float as type number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.divide(1.12,2.345);\nexpect(result).to.be.a('number');",
                  "err": {},
                  "uuid": "a1d3a440-9fea-4df6-823a-84d2853a1e57",
                  "parentUUID": "c8383663-d69e-469e-9e96-f0c197a7d8b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7a04cf7b-507a-413e-a91c-1dd4f97572e7",
                "2f1fc810-0d7f-4e31-a9cf-e0874453848a",
                "a78955f5-4db9-46cc-bcb9-69825f1621be",
                "5538bd17-a46b-47cb-8b3d-c11ad341f632",
                "a8ebc239-dfa4-4d2a-b022-abf6fb5f53c2",
                "dd222ee0-b600-45fc-a7dd-da197a946d69",
                "25d7eda9-d02e-47c2-9e35-006410e21c5c",
                "43ef8911-fb29-4234-b373-e4636ec05c7c",
                "a7feb910-3ada-401b-a3a1-aa5be3b64f2a",
                "6fa42c9a-025c-4450-986e-0201462a194c",
                "01f770bd-4c2d-4fd0-812d-844f09a5b784",
                "a1d3a440-9fea-4df6-823a-84d2853a1e57"
              ],
              "failures": [
                "4190bcbc-c441-452d-a738-146b73a810bc"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1500
            },
            {
              "uuid": "1f710252-1007-410e-ad89-9919959d82b4",
              "title": "Negative cases for divide method",
              "fullFile": "/Users/yuliyakazakevich/Documents/GitHub/js_auto/hw15/test/divide.test.js",
              "file": "/test/divide.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Dividing 0 by zero returns Nan",
                  "fullTitle": "Testing Divide method from calculator class Negative cases for divide method Dividing 0 by zero returns Nan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.divide(0,0);\nexpect(result).to.be.NaN;",
                  "err": {},
                  "uuid": "4b061e43-c536-4f3c-a634-2c9b783b127c",
                  "parentUUID": "1f710252-1007-410e-ad89-9919959d82b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Dividing positive int by zero returns +Infinity",
                  "fullTitle": "Testing Divide method from calculator class Negative cases for divide method Dividing positive int by zero returns +Infinity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.divide(3,0);\nexpect(result).to.be.finite;",
                  "err": {
                    "message": "AssertionError: expected Infinity to be a finite number",
                    "estack": "AssertionError: expected Infinity to be a finite number\n    at Context.<anonymous> (test/divide.test.js:68:24)\n    at process.processImmediate (node:internal/timers:471:21)",
                    "diff": null
                  },
                  "uuid": "77cc0dde-6081-498a-a30a-4f608e89c922",
                  "parentUUID": "1f710252-1007-410e-ad89-9919959d82b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Dividing negative int by zero returns -Infinity",
                  "fullTitle": "Testing Divide method from calculator class Negative cases for divide method Dividing negative int by zero returns -Infinity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.divide(-3,0);\nexpect(result).to.be.finite;",
                  "err": {
                    "message": "AssertionError: expected -Infinity to be a finite number",
                    "estack": "AssertionError: expected -Infinity to be a finite number\n    at Context.<anonymous> (test/divide.test.js:72:24)\n    at process.processImmediate (node:internal/timers:471:21)",
                    "diff": null
                  },
                  "uuid": "7059772d-9a0f-4032-8fe3-f701fd4cd649",
                  "parentUUID": "1f710252-1007-410e-ad89-9919959d82b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to return correct result with actions inside brackets",
                  "fullTitle": "Testing Divide method from calculator class Negative cases for divide method Function is able to return correct result with actions inside brackets",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.divide((3*2),2+3);\nexpect(result).to.be.equal(1.2);",
                  "err": {},
                  "uuid": "b6ff798d-f5db-4791-8a39-30b3e75d3b75",
                  "parentUUID": "1f710252-1007-410e-ad89-9919959d82b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to divide float without 0 in the beginning .01 type",
                  "fullTitle": "Testing Divide method from calculator class Negative cases for divide method Function is able to divide float without 0 in the beginning .01 type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.divide(.10, .10);\nexpect(result).to.be.equal(1);",
                  "err": {},
                  "uuid": "809ab588-03e7-44af-9eb0-a6c6fdb5ef19",
                  "parentUUID": "1f710252-1007-410e-ad89-9919959d82b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is returning 0 when no params passed",
                  "fullTitle": "Testing Divide method from calculator class Negative cases for divide method Function is returning 0 when no params passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.divide();\nexpect(result).to.be.equal(0);",
                  "err": {
                    "message": "AssertionError: expected NaN to equal +0",
                    "estack": "AssertionError: expected NaN to equal +0\n    at Context.<anonymous> (test/divide.test.js:84:25)\n    at process.processImmediate (node:internal/timers:471:21)",
                    "diff": "- NaN\n+ 0\n"
                  },
                  "uuid": "cc4a50e3-69ba-41b2-8c97-b5196d1572d0",
                  "parentUUID": "1f710252-1007-410e-ad89-9919959d82b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to divide untransformed fraction",
                  "fullTitle": "Testing Divide method from calculator class Negative cases for divide method Function is able to divide untransformed fraction",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.divide(1/5,4);\nexpect(result).to.be.equal(0.05);",
                  "err": {},
                  "uuid": "c9d87532-5b0e-43f5-8bb9-236ee865f3ca",
                  "parentUUID": "1f710252-1007-410e-ad89-9919959d82b4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4b061e43-c536-4f3c-a634-2c9b783b127c",
                "b6ff798d-f5db-4791-8a39-30b3e75d3b75",
                "809ab588-03e7-44af-9eb0-a6c6fdb5ef19",
                "c9d87532-5b0e-43f5-8bb9-236ee865f3ca"
              ],
              "failures": [
                "77cc0dde-6081-498a-a30a-4f608e89c922",
                "7059772d-9a0f-4032-8fe3-f701fd4cd649",
                "cc4a50e3-69ba-41b2-8c97-b5196d1572d0"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1500
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1500
        },
        {
          "uuid": "d1d29e04-fcef-4e8f-851a-c7a6eda14bcf",
          "title": "Testing Exponention method from Calculator class",
          "fullFile": "/Users/yuliyakazakevich/Documents/GitHub/js_auto/hw15/test/exponentiation.test.js",
          "file": "/test/exponentiation.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9f57bb13-0e3b-4ee9-8970-657fd58cedb5",
              "title": "Positive cases for Exponentiation method",
              "fullFile": "/Users/yuliyakazakevich/Documents/GitHub/js_auto/hw15/test/exponentiation.test.js",
              "file": "/test/exponentiation.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Function is able to exponent positive int",
                  "fullTitle": "Testing Exponention method from Calculator class Positive cases for Exponentiation method Function is able to exponent positive int",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.exponentiation(4);\nexpect(result).to.be.equal(16);",
                  "err": {},
                  "uuid": "92b8e541-63d7-46ba-9bb1-6f4913c5877c",
                  "parentUUID": "9f57bb13-0e3b-4ee9-8970-657fd58cedb5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to exponent negative int",
                  "fullTitle": "Testing Exponention method from Calculator class Positive cases for Exponentiation method Function is able to exponent negative int",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.exponentiation(-4);\nexpect(result).to.be.equal(16);",
                  "err": {},
                  "uuid": "c6f3922f-e281-4c4b-8213-de8e136a5294",
                  "parentUUID": "9f57bb13-0e3b-4ee9-8970-657fd58cedb5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to exponent positive float",
                  "fullTitle": "Testing Exponention method from Calculator class Positive cases for Exponentiation method Function is able to exponent positive float",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.exponentiation(0.98);\nexpect(result).to.be.equal(0.9604);",
                  "err": {
                    "message": "AssertionError: expected 0.9603999999999999 to equal 0.9604",
                    "estack": "AssertionError: expected 0.9603999999999999 to equal 0.9604\n    at Context.<anonymous> (test/exponentiation.test.js:25:25)\n    at process.processImmediate (node:internal/timers:471:21)",
                    "diff": "- 0.9603999999999999\n+ 0.9604\n"
                  },
                  "uuid": "cf4d0ee6-c9c1-4d01-8e59-b81ac44f0e79",
                  "parentUUID": "9f57bb13-0e3b-4ee9-8970-657fd58cedb5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to exponent negative float",
                  "fullTitle": "Testing Exponention method from Calculator class Positive cases for Exponentiation method Function is able to exponent negative float",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.exponentiation(-4.09);\nexpect(result).to.be.equal(16.7281);",
                  "err": {
                    "message": "AssertionError: expected 16.728099999999998 to equal 16.7281",
                    "estack": "AssertionError: expected 16.728099999999998 to equal 16.7281\n    at Context.<anonymous> (test/exponentiation.test.js:29:25)\n    at process.processImmediate (node:internal/timers:471:21)",
                    "diff": "- 16.728099999999998\n+ 16.7281\n"
                  },
                  "uuid": "cc1236ba-7dd9-429d-9855-9c755d071c9c",
                  "parentUUID": "9f57bb13-0e3b-4ee9-8970-657fd58cedb5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to exponent 0",
                  "fullTitle": "Testing Exponention method from Calculator class Positive cases for Exponentiation method Function is able to exponent 0",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.exponentiation(0);\nexpect(result).to.be.equal(0);",
                  "err": {},
                  "uuid": "3a0014c8-35a9-4a24-bd94-8f36c0df9e06",
                  "parentUUID": "9f57bb13-0e3b-4ee9-8970-657fd58cedb5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "92b8e541-63d7-46ba-9bb1-6f4913c5877c",
                "c6f3922f-e281-4c4b-8213-de8e136a5294",
                "3a0014c8-35a9-4a24-bd94-8f36c0df9e06"
              ],
              "failures": [
                "cf4d0ee6-c9c1-4d01-8e59-b81ac44f0e79",
                "cc1236ba-7dd9-429d-9855-9c755d071c9c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1500
            },
            {
              "uuid": "a12c1388-717e-4866-8cf7-9b5bffccfb2a",
              "title": "Negative cases for Exponentiation method",
              "fullFile": "/Users/yuliyakazakevich/Documents/GitHub/js_auto/hw15/test/exponentiation.test.js",
              "file": "/test/exponentiation.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Function is able to exponent .01",
                  "fullTitle": "Testing Exponention method from Calculator class Negative cases for Exponentiation method Function is able to exponent .01",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.exponentiation(.01);\nexpect(result).to.be.equal(0.0001);",
                  "err": {},
                  "uuid": "c74a429f-b000-438a-8680-5ad0247d6d78",
                  "parentUUID": "a12c1388-717e-4866-8cf7-9b5bffccfb2a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c74a429f-b000-438a-8680-5ad0247d6d78"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1500
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1500
        },
        {
          "uuid": "e50e266b-1fcd-4ee4-9f85-2373b6ed3990",
          "title": "Testing Multiply method from calculator class",
          "fullFile": "/Users/yuliyakazakevich/Documents/GitHub/js_auto/hw15/test/multiply.test.js",
          "file": "/test/multiply.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2796b1af-f2c7-4b7a-b960-bdfd8c6fae4c",
              "title": "Positive cases for Multiply method",
              "fullFile": "/Users/yuliyakazakevich/Documents/GitHub/js_auto/hw15/test/multiply.test.js",
              "file": "/test/multiply.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Function is able to multiply two possitive integers",
                  "fullTitle": "Testing Multiply method from calculator class Positive cases for Multiply method Function is able to multiply two possitive integers",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.multiply(4,3);\nexpect(result).to.be.equal(12);",
                  "err": {},
                  "uuid": "0ea6840b-9a90-4c0a-819d-52628f6c5f35",
                  "parentUUID": "2796b1af-f2c7-4b7a-b960-bdfd8c6fae4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to multiply two negative integers",
                  "fullTitle": "Testing Multiply method from calculator class Positive cases for Multiply method Function is able to multiply two negative integers",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.multiply(-10, -4);\nexpect(result).to.equal(40);",
                  "err": {},
                  "uuid": "13ba2ab5-15ac-417b-8ab9-508a165b7914",
                  "parentUUID": "2796b1af-f2c7-4b7a-b960-bdfd8c6fae4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to multiply positive int and negative int",
                  "fullTitle": "Testing Multiply method from calculator class Positive cases for Multiply method Function is able to multiply positive int and negative int",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.multiply(5,-2);\nexpect(result).to.be.equal(-10);",
                  "err": {},
                  "uuid": "c13b374e-2fc8-4767-8b38-2b44ef1f765e",
                  "parentUUID": "2796b1af-f2c7-4b7a-b960-bdfd8c6fae4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to multiply two positive float with the same amount of numbers after dot",
                  "fullTitle": "Testing Multiply method from calculator class Positive cases for Multiply method Function is able to multiply two positive float with the same amount of numbers after dot",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.multiply(4.28, 0.14);\nexpect(result).to.be.equal(0.5992);",
                  "err": {
                    "message": "AssertionError: expected 0.5992000000000001 to equal 0.5992",
                    "estack": "AssertionError: expected 0.5992000000000001 to equal 0.5992\n    at Context.<anonymous> (test/multiply.test.js:22:25)\n    at process.processImmediate (node:internal/timers:471:21)",
                    "diff": "- 0.5992000000000001\n+ 0.5992\n"
                  },
                  "uuid": "e07f7350-3be5-43d2-a870-42882c4248df",
                  "parentUUID": "2796b1af-f2c7-4b7a-b960-bdfd8c6fae4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to multiply two negative float with different amount of numbers after dot",
                  "fullTitle": "Testing Multiply method from calculator class Positive cases for Multiply method Function is able to multiply two negative float with different amount of numbers after dot",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.multiply(-10.2,-2.51);\nexpect(result).to.be.equal(25.602);",
                  "err": {
                    "message": "AssertionError: expected 25.601999999999997 to equal 25.602",
                    "estack": "AssertionError: expected 25.601999999999997 to equal 25.602\n    at Context.<anonymous> (test/multiply.test.js:26:25)\n    at process.processImmediate (node:internal/timers:471:21)",
                    "diff": "- 25.601999999999997\n+ 25.602\n"
                  },
                  "uuid": "ce54344b-9050-41cf-9dba-b955f7f42865",
                  "parentUUID": "2796b1af-f2c7-4b7a-b960-bdfd8c6fae4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to multiply negative float and positive int",
                  "fullTitle": "Testing Multiply method from calculator class Positive cases for Multiply method Function is able to multiply negative float and positive int",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.multiply(-0.98, 11);\nexpect(result).to.be.equal(-10.78);",
                  "err": {},
                  "uuid": "37e12554-d6d3-4ac0-a427-665ab271307a",
                  "parentUUID": "2796b1af-f2c7-4b7a-b960-bdfd8c6fae4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to multiply zero",
                  "fullTitle": "Testing Multiply method from calculator class Positive cases for Multiply method Function is able to multiply zero",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.multiply(0);\nexpect(result).to.be.equal(0);",
                  "err": {},
                  "uuid": "6fd87de5-5ab5-4895-8280-3050279adcb5",
                  "parentUUID": "2796b1af-f2c7-4b7a-b960-bdfd8c6fae4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to multiply zero and positive float",
                  "fullTitle": "Testing Multiply method from calculator class Positive cases for Multiply method Function is able to multiply zero and positive float",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.multiply(0,0.3434);\nexpect(result).to.be.equal(0);",
                  "err": {},
                  "uuid": "3b22224f-35fc-4fc1-9160-c0ec865c47eb",
                  "parentUUID": "2796b1af-f2c7-4b7a-b960-bdfd8c6fae4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to multiply zero and negative float",
                  "fullTitle": "Testing Multiply method from calculator class Positive cases for Multiply method Function is able to multiply zero and negative float",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.multiply(-14.980, 0);\nexpect(result).to.be.equal(0);",
                  "err": {},
                  "uuid": "87a5d60c-3d64-45e2-bef2-6f30837532eb",
                  "parentUUID": "2796b1af-f2c7-4b7a-b960-bdfd8c6fae4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to multiply zero and positive int",
                  "fullTitle": "Testing Multiply method from calculator class Positive cases for Multiply method Function is able to multiply zero and positive int",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.multiply(0,10);\nexpect(result).to.be.equal(0);",
                  "err": {},
                  "uuid": "7db9c493-09ab-42ec-bafe-8590f7a90be0",
                  "parentUUID": "2796b1af-f2c7-4b7a-b960-bdfd8c6fae4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to multiply zero and negative int",
                  "fullTitle": "Testing Multiply method from calculator class Positive cases for Multiply method Function is able to multiply zero and negative int",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.multiply(0,-1);\nexpect(result).to.be.equal(0);",
                  "err": {},
                  "uuid": "5e62ad49-af91-4ea7-bb81-a6008226e9d1",
                  "parentUUID": "2796b1af-f2c7-4b7a-b960-bdfd8c6fae4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to multiply multiple floats",
                  "fullTitle": "Testing Multiply method from calculator class Positive cases for Multiply method Function is able to multiply multiple floats",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.multiply(0.10, -0.15, 5.12);\nexpect(result).to.be.equal(-0.0768);",
                  "err": {},
                  "uuid": "617a48b0-d3a6-4e81-9d6f-20ff9dab2d0c",
                  "parentUUID": "2796b1af-f2c7-4b7a-b960-bdfd8c6fae4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is returning result for int as type number",
                  "fullTitle": "Testing Multiply method from calculator class Positive cases for Multiply method Function is returning result for int as type number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.multiply(1,2);\nexpect(result).to.be.a('number');",
                  "err": {},
                  "uuid": "741137fd-2e48-4bdb-8c7c-a1b2ba8f2760",
                  "parentUUID": "2796b1af-f2c7-4b7a-b960-bdfd8c6fae4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is returning result for float as type number",
                  "fullTitle": "Testing Multiply method from calculator class Positive cases for Multiply method Function is returning result for float as type number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.multiply(1.12,2.345);\nexpect(result).to.be.a('number');",
                  "err": {},
                  "uuid": "2d912abf-8bf7-4dd6-8a8e-26454b603508",
                  "parentUUID": "2796b1af-f2c7-4b7a-b960-bdfd8c6fae4c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ea6840b-9a90-4c0a-819d-52628f6c5f35",
                "13ba2ab5-15ac-417b-8ab9-508a165b7914",
                "c13b374e-2fc8-4767-8b38-2b44ef1f765e",
                "37e12554-d6d3-4ac0-a427-665ab271307a",
                "6fd87de5-5ab5-4895-8280-3050279adcb5",
                "3b22224f-35fc-4fc1-9160-c0ec865c47eb",
                "87a5d60c-3d64-45e2-bef2-6f30837532eb",
                "7db9c493-09ab-42ec-bafe-8590f7a90be0",
                "5e62ad49-af91-4ea7-bb81-a6008226e9d1",
                "617a48b0-d3a6-4e81-9d6f-20ff9dab2d0c",
                "741137fd-2e48-4bdb-8c7c-a1b2ba8f2760",
                "2d912abf-8bf7-4dd6-8a8e-26454b603508"
              ],
              "failures": [
                "e07f7350-3be5-43d2-a870-42882c4248df",
                "ce54344b-9050-41cf-9dba-b955f7f42865"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1500
            },
            {
              "uuid": "3689f1b1-ab83-4c94-a7a6-51784bef7745",
              "title": "Negative cases for multiply method",
              "fullFile": "/Users/yuliyakazakevich/Documents/GitHub/js_auto/hw15/test/multiply.test.js",
              "file": "/test/multiply.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Function is able to return correct result when params passed as array",
                  "fullTitle": "Testing Multiply method from calculator class Negative cases for multiply method Function is able to return correct result when params passed as array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.multiply([1,2]);\nexpect(result).to.be.equal(2);",
                  "err": {
                    "message": "AssertionError: expected NaN to equal 2",
                    "estack": "AssertionError: expected NaN to equal 2\n    at Context.<anonymous> (test/multiply.test.js:68:25)\n    at process.processImmediate (node:internal/timers:471:21)",
                    "diff": "- NaN\n+ 2\n"
                  },
                  "uuid": "b0f71a90-7aca-45d7-8d03-249e3d476ab8",
                  "parentUUID": "3689f1b1-ab83-4c94-a7a6-51784bef7745",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to return correct result with actions inside brackets",
                  "fullTitle": "Testing Multiply method from calculator class Negative cases for multiply method Function is able to return correct result with actions inside brackets",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.multiply((3*2),3 * 3);\nexpect(result).to.be.equal(54);",
                  "err": {},
                  "uuid": "0a5197c1-ef24-4356-bdae-a9574f62868d",
                  "parentUUID": "3689f1b1-ab83-4c94-a7a6-51784bef7745",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to return correct result when passed only 1 param",
                  "fullTitle": "Testing Multiply method from calculator class Negative cases for multiply method Function is able to return correct result when passed only 1 param",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.multiply(10);\nexpect(result).to.be.equal(10);",
                  "err": {},
                  "uuid": "5a7522d6-5629-446e-9b81-45fa335e4ed6",
                  "parentUUID": "3689f1b1-ab83-4c94-a7a6-51784bef7745",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to multiply float without 0 in the beginning .01 type",
                  "fullTitle": "Testing Multiply method from calculator class Negative cases for multiply method Function is able to multiply float without 0 in the beginning .01 type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.multiply(.10, .10);\nexpect(result).to.be.equal(0.01);",
                  "err": {
                    "message": "AssertionError: expected 0.010000000000000002 to equal 0.01",
                    "estack": "AssertionError: expected 0.010000000000000002 to equal 0.01\n    at Context.<anonymous> (test/multiply.test.js:80:25)\n    at process.processImmediate (node:internal/timers:471:21)",
                    "diff": "- 0.010000000000000002\n+ 0.01\n"
                  },
                  "uuid": "c2dcf80e-08ac-4e3e-8562-4caa9ccad0a8",
                  "parentUUID": "3689f1b1-ab83-4c94-a7a6-51784bef7745",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is returning 0 when no params passed",
                  "fullTitle": "Testing Multiply method from calculator class Negative cases for multiply method Function is returning 0 when no params passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.multiply();\nexpect(result).to.be.equal(0);",
                  "err": {
                    "message": "AssertionError: expected 1 to equal +0",
                    "estack": "AssertionError: expected 1 to equal +0\n    at Context.<anonymous> (test/multiply.test.js:84:25)\n    at process.processImmediate (node:internal/timers:471:21)",
                    "diff": "- 1\n+ 0\n"
                  },
                  "uuid": "15abe8c0-4bf3-4a43-80d2-958e6db5a8b0",
                  "parentUUID": "3689f1b1-ab83-4c94-a7a6-51784bef7745",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to multiply untransformed fraction",
                  "fullTitle": "Testing Multiply method from calculator class Negative cases for multiply method Function is able to multiply untransformed fraction",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.multiply(1/5,4);\nexpect(result).to.be.equal(0.8);",
                  "err": {},
                  "uuid": "1c65f70d-43ea-4750-a065-c446ce7aa08c",
                  "parentUUID": "3689f1b1-ab83-4c94-a7a6-51784bef7745",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0a5197c1-ef24-4356-bdae-a9574f62868d",
                "5a7522d6-5629-446e-9b81-45fa335e4ed6",
                "1c65f70d-43ea-4750-a065-c446ce7aa08c"
              ],
              "failures": [
                "b0f71a90-7aca-45d7-8d03-249e3d476ab8",
                "c2dcf80e-08ac-4e3e-8562-4caa9ccad0a8",
                "15abe8c0-4bf3-4a43-80d2-958e6db5a8b0"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1500
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1500
        },
        {
          "uuid": "73702a9d-67ca-487a-bbcb-8e0c54f48b19",
          "title": "Testing Subtraction method from calculator class",
          "fullFile": "/Users/yuliyakazakevich/Documents/GitHub/js_auto/hw15/test/subtraction.test.js",
          "file": "/test/subtraction.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3bb371b4-7c2d-407c-bdf9-dfad0852d483",
              "title": "Positive cases for Subtraction method",
              "fullFile": "/Users/yuliyakazakevich/Documents/GitHub/js_auto/hw15/test/subtraction.test.js",
              "file": "/test/subtraction.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Function is able to subtract two possitive integers",
                  "fullTitle": "Testing Subtraction method from calculator class Positive cases for Subtraction method Function is able to subtract two possitive integers",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.subtraction(30,2);\nexpect(result).to.be.equal(28);",
                  "err": {},
                  "uuid": "0fc2f7cb-5cce-4ba4-81dd-d4924dafb0a3",
                  "parentUUID": "3bb371b4-7c2d-407c-bdf9-dfad0852d483",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to subtract two negative integers",
                  "fullTitle": "Testing Subtraction method from calculator class Positive cases for Subtraction method Function is able to subtract two negative integers",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.subtraction(-2,-6);\nexpect(result).to.equal(4);",
                  "err": {},
                  "uuid": "a39a4c95-a4f9-4946-9df7-071958b0360e",
                  "parentUUID": "3bb371b4-7c2d-407c-bdf9-dfad0852d483",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to subtract positive int and negative int",
                  "fullTitle": "Testing Subtraction method from calculator class Positive cases for Subtraction method Function is able to subtract positive int and negative int",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.subtraction(5,-2);\nexpect(result).to.be.equal(7);",
                  "err": {},
                  "uuid": "dbfe2fdf-f27b-45eb-a7dd-59aa17f3d5b2",
                  "parentUUID": "3bb371b4-7c2d-407c-bdf9-dfad0852d483",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to subtract two positive float with the same amount of numbers after dot",
                  "fullTitle": "Testing Subtraction method from calculator class Positive cases for Subtraction method Function is able to subtract two positive float with the same amount of numbers after dot",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.subtraction(4.28, 0.14);\nexpect(result).to.be.equal(4.14);",
                  "err": {
                    "message": "AssertionError: expected 4.140000000000001 to equal 4.14",
                    "estack": "AssertionError: expected 4.140000000000001 to equal 4.14\n    at Context.<anonymous> (test/subtraction.test.js:22:25)\n    at process.processImmediate (node:internal/timers:471:21)",
                    "diff": "- 4.140000000000001\n+ 4.14\n"
                  },
                  "uuid": "559448f8-44c6-4bb8-8789-490224f488e1",
                  "parentUUID": "3bb371b4-7c2d-407c-bdf9-dfad0852d483",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to subtract two negative float with different amount of numbers after dot",
                  "fullTitle": "Testing Subtraction method from calculator class Positive cases for Subtraction method Function is able to subtract two negative float with different amount of numbers after dot",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.subtraction(-10.2,-2.55);\nexpect(result).to.be.equal(-7.65);",
                  "err": {
                    "message": "AssertionError: expected -7.6499999999999995 to equal -7.65",
                    "estack": "AssertionError: expected -7.6499999999999995 to equal -7.65\n    at Context.<anonymous> (test/subtraction.test.js:26:25)\n    at process.processImmediate (node:internal/timers:471:21)",
                    "diff": "- -7.6499999999999995\n+ -7.65\n"
                  },
                  "uuid": "a42b8089-d7e7-4cd3-826e-82d19d6baec1",
                  "parentUUID": "3bb371b4-7c2d-407c-bdf9-dfad0852d483",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to subtract negative float and positive int",
                  "fullTitle": "Testing Subtraction method from calculator class Positive cases for Subtraction method Function is able to subtract negative float and positive int",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.subtraction(-0.98, 2);\nexpect(result).to.be.equal(-2.98);",
                  "err": {},
                  "uuid": "17b7e35d-d1c2-4b73-8095-5e7e18945f77",
                  "parentUUID": "3bb371b4-7c2d-407c-bdf9-dfad0852d483",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to subtract zero",
                  "fullTitle": "Testing Subtraction method from calculator class Positive cases for Subtraction method Function is able to subtract zero",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.subtraction(0,0);\nexpect(result).to.be.equal(0);",
                  "err": {},
                  "uuid": "40b79a3b-9d55-47ed-8589-f25226114714",
                  "parentUUID": "3bb371b4-7c2d-407c-bdf9-dfad0852d483",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to subtract zero and positive float",
                  "fullTitle": "Testing Subtraction method from calculator class Positive cases for Subtraction method Function is able to subtract zero and positive float",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.subtraction(0,0.3434);\nexpect(result).to.be.equal(-0.3434);",
                  "err": {},
                  "uuid": "86d860b3-e4c9-4220-aa3c-8bf7c24f54a3",
                  "parentUUID": "3bb371b4-7c2d-407c-bdf9-dfad0852d483",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to subtract zero and negative float",
                  "fullTitle": "Testing Subtraction method from calculator class Positive cases for Subtraction method Function is able to subtract zero and negative float",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.subtraction(-14.980, 0);\nexpect(result).to.be.equal(-14.980);",
                  "err": {},
                  "uuid": "079f2302-7790-4706-a9a8-e295eadbe101",
                  "parentUUID": "3bb371b4-7c2d-407c-bdf9-dfad0852d483",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to subtract zero and positive int",
                  "fullTitle": "Testing Subtraction method from calculator class Positive cases for Subtraction method Function is able to subtract zero and positive int",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.subtraction(0,10);\nexpect(result).to.be.equal(-10);",
                  "err": {},
                  "uuid": "5a0c84b4-a3b9-456d-84a1-38eb8d0dd4ec",
                  "parentUUID": "3bb371b4-7c2d-407c-bdf9-dfad0852d483",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to subtract zero and negative int",
                  "fullTitle": "Testing Subtraction method from calculator class Positive cases for Subtraction method Function is able to subtract zero and negative int",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.subtraction(0,-1);\nexpect(result).to.be.equal(1);",
                  "err": {},
                  "uuid": "0858da1d-2b9a-4f75-ac84-4d407e12bed6",
                  "parentUUID": "3bb371b4-7c2d-407c-bdf9-dfad0852d483",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is returning result for int as type number",
                  "fullTitle": "Testing Subtraction method from calculator class Positive cases for Subtraction method Function is returning result for int as type number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.subtraction(1,2);\nexpect(result).to.be.a('number');",
                  "err": {},
                  "uuid": "76571ff3-07ba-4ee9-96bc-e7d9636a439c",
                  "parentUUID": "3bb371b4-7c2d-407c-bdf9-dfad0852d483",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is returning result for float as type number",
                  "fullTitle": "Testing Subtraction method from calculator class Positive cases for Subtraction method Function is returning result for float as type number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.subtraction(1.12,2.345);\nexpect(result).to.be.a('number');",
                  "err": {},
                  "uuid": "03c23adf-fd3a-43d8-af7d-9aec258d0f07",
                  "parentUUID": "3bb371b4-7c2d-407c-bdf9-dfad0852d483",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0fc2f7cb-5cce-4ba4-81dd-d4924dafb0a3",
                "a39a4c95-a4f9-4946-9df7-071958b0360e",
                "dbfe2fdf-f27b-45eb-a7dd-59aa17f3d5b2",
                "17b7e35d-d1c2-4b73-8095-5e7e18945f77",
                "40b79a3b-9d55-47ed-8589-f25226114714",
                "86d860b3-e4c9-4220-aa3c-8bf7c24f54a3",
                "079f2302-7790-4706-a9a8-e295eadbe101",
                "5a0c84b4-a3b9-456d-84a1-38eb8d0dd4ec",
                "0858da1d-2b9a-4f75-ac84-4d407e12bed6",
                "76571ff3-07ba-4ee9-96bc-e7d9636a439c",
                "03c23adf-fd3a-43d8-af7d-9aec258d0f07"
              ],
              "failures": [
                "559448f8-44c6-4bb8-8789-490224f488e1",
                "a42b8089-d7e7-4cd3-826e-82d19d6baec1"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1500
            },
            {
              "uuid": "a979aa99-5f50-47ca-9628-1a66c229e931",
              "title": "Negative cases for Subtraction method",
              "fullFile": "/Users/yuliyakazakevich/Documents/GitHub/js_auto/hw15/test/subtraction.test.js",
              "file": "/test/subtraction.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Function is able to return correct result with actions inside brackets",
                  "fullTitle": "Testing Subtraction method from calculator class Negative cases for Subtraction method Function is able to return correct result with actions inside brackets",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.subtraction((10 + 4) * 2,3 * 3);\nexpect(result).to.be.equal(61);",
                  "err": {
                    "message": "AssertionError: expected 19 to equal 61",
                    "estack": "AssertionError: expected 19 to equal 61\n    at Context.<anonymous> (test/subtraction.test.js:64:25)\n    at process.processImmediate (node:internal/timers:471:21)",
                    "diff": "- 19\n+ 61\n"
                  },
                  "uuid": "ea021630-e8ec-49b4-a608-9c9d296e017c",
                  "parentUUID": "a979aa99-5f50-47ca-9628-1a66c229e931",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to return correct result when passed only 1 param",
                  "fullTitle": "Testing Subtraction method from calculator class Negative cases for Subtraction method Function is able to return correct result when passed only 1 param",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.subtraction(10);\nexpect(result).to.be.equal(10);",
                  "err": {
                    "message": "AssertionError: expected NaN to equal 10",
                    "estack": "AssertionError: expected NaN to equal 10\n    at Context.<anonymous> (test/subtraction.test.js:68:25)\n    at process.processImmediate (node:internal/timers:471:21)",
                    "diff": "- NaN\n+ 10\n"
                  },
                  "uuid": "919f7c59-3fdf-4da9-b08d-d42ba39fe98e",
                  "parentUUID": "a979aa99-5f50-47ca-9628-1a66c229e931",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to subtract float without 0 in the beginning .01 type",
                  "fullTitle": "Testing Subtraction method from calculator class Negative cases for Subtraction method Function is able to subtract float without 0 in the beginning .01 type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.subtraction(.10, .10);\nexpect(result).to.be.equal(0);",
                  "err": {},
                  "uuid": "709c0954-5d4f-4d0e-8b95-ba06eb61e573",
                  "parentUUID": "a979aa99-5f50-47ca-9628-1a66c229e931",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is returning 0 when no params passed",
                  "fullTitle": "Testing Subtraction method from calculator class Negative cases for Subtraction method Function is returning 0 when no params passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.subtraction();\nexpect(result).to.be.equal(0);",
                  "err": {
                    "message": "AssertionError: expected NaN to equal +0",
                    "estack": "AssertionError: expected NaN to equal +0\n    at Context.<anonymous> (test/subtraction.test.js:76:25)\n    at process.processImmediate (node:internal/timers:471:21)",
                    "diff": "- NaN\n+ 0\n"
                  },
                  "uuid": "b0bf9df8-3f72-4d21-9d94-87f2a6e654a7",
                  "parentUUID": "a979aa99-5f50-47ca-9628-1a66c229e931",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Function is able to subtract untransformed fraction",
                  "fullTitle": "Testing Subtraction method from calculator class Negative cases for Subtraction method Function is able to subtract untransformed fraction",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = calc.subtraction(1/5,4);\nexpect(result).to.be.equal(-3.8);",
                  "err": {},
                  "uuid": "86d706ae-b39b-4bc3-b51f-a93e315d3610",
                  "parentUUID": "a979aa99-5f50-47ca-9628-1a66c229e931",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "709c0954-5d4f-4d0e-8b95-ba06eb61e573",
                "86d706ae-b39b-4bc3-b51f-a93e315d3610"
              ],
              "failures": [
                "ea021630-e8ec-49b4-a608-9c9d296e017c",
                "919f7c59-3fdf-4da9-b08d-d42ba39fe98e",
                "b0bf9df8-3f72-4d21-9d94-87f2a6e654a7"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1500
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1500
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1500
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}